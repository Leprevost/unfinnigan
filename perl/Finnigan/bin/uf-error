#!/usr/bin/env perl

use strict;
use warnings;
use feature qw/state say/;
use 5.010;

use Finnigan;

@ARGV == 1 or do {
  say STDERR "Usage: $0 <file>";
  exit -1;
};
my $file = $ARGV[0];
-e $file or do {
  say STDERR "file '$file' does not exist";
  exit -1;
};
-f $file or do {
  say STDERR "'$file' is not a plain file";
  exit -1;
};
-s $file or do {
  say STDERR "'$file' has zero size";
  exit -1;
};

# -----------------------------------------------------------------------------
open INPUT, "<$file" or die "can't open '$file': $!";
binmode INPUT;

my $header = Finnigan::FileHeader->decode(\*INPUT);
my $seq_row = Finnigan::SeqRow->decode(\*INPUT, $header->version);
my $cas_info = Finnigan::CASInfo->decode(\*INPUT);
my $rfi = Finnigan::RawFileInfo->decode(\*INPUT, $header->version);

my $run_header_addr = $rfi->preamble->run_header_addr;

# fast-forward to RunHeader
seek INPUT, $run_header_addr, 0;
my $run_header = Finnigan::RunHeader->decode(\*INPUT, $header->version);
my $error_log_addr = $run_header->sample_info->error_log_addr;

# and now skip to the error log
seek INPUT, $error_log_addr, 0;
my $error_log_length = Finnigan::Decoder->read(\*INPUT, ['length' => ['V', 'UInt32']])->{data}->{length}->{value};
exit 0 unless $error_log_length;

foreach my $i ( 0 .. $error_log_length - 1) {
  my $e = Finnigan::Error->decode(\*INPUT);
  say STDERR $e->time . "\t" . $e->message;
}

__END__
=head1 NAME

uf-error - print the error log entries from a Finnigan raw file

=head1 SYNOPSIS

uf-log file

 Options:

  -header			extract the log header (record structure)
  -d[ump]			dump the requested feature with file seek addresses
  -a[ll]			dump all field descriptors [requires: -d]
  -s[ize]			print record size [requires: -d]
  -n[unmber] <n:0+n>		extract the log entry number <n>
  -h[tml]			format as html
  -w[iki]			format as a wiki table format
  -r[elative]			show relative addersess in dump [requires: -d]
  <file>			input file [required]

=head1 OPTIONS

=over 4

=item B<-help>

Print a brief help message and exit.

=item B<-d[ump]>

Prints a table listing all fields in the requested object (a log entry
or the file header), with their seek addresses, sizes, names and
values. Individual entries can be selected with the B<-n[umber]>
option.

=item B<-n[umber]>

Gives the number of a single InstrumentLogRecord to extract

=item B<-h[tml]>

Format the dump output as an html table. When multiple entries are
specified, each will be rendered in its own table

=item B<-w[iki]>

Format the dump output as a wiki table.

=item B<-s[ize]>

Show structure size in bytes (works with the -d[ump] option).

=item B<-r[elative]>

Show relative addresses of all itmes in the dump. The default is to
show the absolute seek address. (works with the -d[ump] option)

=item B<-a[ll]>

Dump all GenericDataDescriptor entries in the file header (requires B<-header>)

=back

=head1 DESCRIPTION

B<uf-log> can be used to examine the instrument log stream in a
Finnigan raw file. The instrument log records typically contain more
than a hundred parameters, including operational data on the pumps,
power supplies, ion optics and injectors -- everything that may be
useful in the auditing of the instrument's performance.

Each record is timestamped with the current retention time of the
sample.

=head1 SEE ALSO

Finnigan::InstrumentLog
Finnigan::InstrumentLogRecord

=head1 EXAMPLES

uf-log sample.raw 

  (will list all log records in the tabular form: <record number, time, label, value>)

uf-log -n 5 sample.raw

  (will print the fifth log record)

uf-log -header sample.raw

  (will print the contents of the file header in the tabular form: <type, length, label>)

uf-log -header -dw sample.raw

  (will dump the header in the compact wiki format, with a stringified
  GenericDataDescriptor list)

uf-log -header -daw sample.raw

  (will dump the header in the extended wiki format, showing the
  location of echa GenericDataDescriptor's element)


=cut
