#!/usr/bin/env perl

use strict;
use warnings;
use feature qw/state say/;
use 5.010;

use Getopt::Long;
use Pod::Usage;
use Finnigan;

my $option_help = 0;
my $option_man = 0;
my $option_dump = 0;
my $option_html = 0;
my $option_wiki = 0;
my $option_size = 0;
my $option_relative = 0;
my $option_all = 0;

Getopt::Long::Configure ("bundling");
GetOptions(
	   'help|?' => \$option_help,
	   'man' => \$option_man,
	   'dump|d' => \$option_dump,
	   'size|s' => \$option_size,
	   'html|h' => \$option_html,
	   'wiki|w' => \$option_wiki,
	   'relative|r' => \$option_relative,
	   'all|a' => \$option_all,
	  ) or pod2usage(2);
pod2usage(1) if $option_help;
pod2usage(-existstatus => 0, -verbose => 2) if $option_man;

@ARGV == 1 or do{ say STDERR "Expecting a single input file\n"; pod2usage(2) };

my $file = shift @ARGV;

-e $file or die "file '$file' does not exist";
-f $file or die "'$file' is not a plain file";
-s $file or die "'$file' has zero size";

# -----------------------------------------------------------------------------
open INPUT, "<$file" or die "can't open '$file': $!";
binmode INPUT;

my $header = Finnigan::FileHeader->decode(\*INPUT);
my $seq_row = Finnigan::SeqRow->decode(\*INPUT, $header->version);
my $cas_info = Finnigan::CASInfo->decode(\*INPUT);
my $rfi = Finnigan::RawFileInfo->decode(\*INPUT, $header->version);

# fast-forward to RunHeader
my $run_header_addr = $rfi->preamble->run_header_addr;
seek INPUT, $run_header_addr, 0;
my $run_header = Finnigan::RunHeader->decode(\*INPUT, $header->version);

# fast-forward to ScanIndex
my $scan_index_addr = $run_header->sample_info->scan_index_addr;
seek INPUT, $scan_index_addr, 0;

if ( $option_dump ) {
  my $index_entry = Finnigan::ScanIndexEntry->decode(\*INPUT);
  if ( $option_size ) {
    say "size: " . $index_entry->size;
  }

  if ( $option_html ) {
    $index_entry->dump(style => 'html', relative => $option_relative);
  }
  elsif ( $option_wiki ) {
    $index_entry->dump(style => 'wiki', relative => $option_relative);
  }
  else {
    $index_entry->dump(relative => $option_relative);
  }
}
else {
  if ( $option_all ) {
    # An alternative way to read all entries (assuming there ever are
    # more of them than the number between the first and the last
    # scans specified in SampleInfo) is to read everything between the
    # start address of ScanIndex and the address of the stream
    # following it. Since ScanIndexEntry is a static structure, the
    # number of entries is obtained by dividing the address offset by
    # the entry size

    my $trailer_addr = $run_header->trailer_addr;
    my $stream_size = $trailer_addr - $scan_index_addr;
    die "nothing to read" unless $stream_size > 0;

    # Read one record and measure its size. We know it's 72, but
    # better be indirect, and there is no time to add a recursive size
    # method to Decoder, to calculate the expected size.
    my $entry = Finnigan::ScanIndexEntry->decode(\*INPUT);
    print_as_table_row($entry);
    my $record_size = $entry->size;

    my $nrecords = $stream_size / $record_size;
    die "can't fit the whole number of $record_size\-byte records between $scan_index_addr and $trailer_addr" if $stream_size % $record_size;
    foreach my $n ( 2 .. $nrecords ) {
      print_as_table_row(Finnigan::ScanIndexEntry->decode(\*INPUT));
    }
  }
  else {
    # unless option --all is given, assume the index range specfied in SampleInfo is wanted

    # this code is not fool-proof and is not finished! It assumes that
    # there are exactly as many entries in ScanIndex as would fit
    # between $first_scan and $last_scan. In other words, the internal
    # indices and links are not checked.
    my $first_scan = $run_header->sample_info->first_scan;
    my $last_scan = $run_header->sample_info->last_scan;
    foreach my $index ($first_scan - 1 .. $last_scan - 1) {
      print_as_table_row(Finnigan::ScanIndexEntry->decode(\*INPUT));
    }
  }
}

sub print_as_table_row {
  my $index_entry = shift;
  say $index_entry->index . "\t"
    . $index_entry->next . "\t"
      . $index_entry->scan_segment . "\t"
	. $index_entry->scan_event . "\t"
	  . $index_entry->offset . "\t"
	    . $index_entry->data_size . "\t"
	      . $index_entry->unknown . "\t"
		. $index_entry->start_time . "\t"
		  . $index_entry->low_mz . "\t"
		    . $index_entry->high_mz . "\t"
		      . $index_entry->base_intensity . "\t"
			. $index_entry->base_mass . "\t"
			  . $index_entry->total_current
}

__END__
=head1 NAME

uf-header - decode the file header in a Finnigan raw file

=head1 SYNOPSIS

uf-header [options] file

 Options:
   --help            brief help message
   --man             full documentation
   --html            requet html formatting of the output of -dump 
   --size            tell object size
   --relative        show relative addresses
   --all             print all index existing entries 

=head1 OPTIONS

=over 4

=item B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=item B<--dump>

Prints the table listing all header fields with their seek addresses,
sizes, acess keys and values.

=item B<--html>

Changes the output style of -dump to html.

=item B<--size>

Prints the size of the header in bytes.

=item B<--relative>

Show relative addresses of all itmes. The default is to show the
absolute seek address.

=item B<--all>

Print all existing index entries. It appears as though it may be
possible to see more index entries in the file than would fit between
the first and the last scan numbers specified in SampleInfo. In that
case, in the absence of the --all option, ScanIndex will be treated as
a linked list, starting with the entry whose index matches first scan
number.

=back

=head1 DESCRIPTION

B<uf-casinfo> will read the given input file and display the contents
of its RawFileInfo structure, or its component RawFileInfoPreamble.

It will return an error message if its input is not a Finnigan raw
file.

By default, it dumps the object in a tabular format.

=cut
